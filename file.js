const fs = require('fs');

/*пример асинхронного метода: чтение файла. Первый параметр - путь к файлу, второй параметр - функция обработчик.
обращаем внимание на функцию-обработчик, которая использует распространённый подход в NodeJS: 
первый параметр err - зарезервированн для ошибки, а второй data - результат работы(
данные считанные из файла). Когда присутствует err - мы должны проверить наличие ошибки.
*/

fs.readFile('log.txt', (err, data)=>{
    if (err) {
        throw err('file reading error');
    }
    console.log(data.toString());    
})

/* по умолчанию в NodeJs data нам вернёт буфер - это массив кодов символов, содержащихся в строке
//<Buffer ff fe 48 00 45 00 4c 00 4c 00 4f 00 20 00 6c 00 6f 00 67 00 0d 00 0a 00>
но его можно конвертировать в строку data.toString()*/ 

//синхронный вариант:
const data = fs.readFileSync('error.txt');
console.log(data.toString());
// его не стоит использовать для веб приложений, так как это блокирующий вариант. Во время чтения большого
// файла на сервере синхронным методом мы не сможем параллельно обрабатывать запросы других пользователей
// В консольных приложениях допустимо использовать синхронные методы, но в вэбе - ни-ни.